const { DynamoDBClient, QueryCommand, ScanCommand } = require('@aws-sdk/client-dynamodb');
const { S3Client, PutObjectCommand, DeleteObjectCommand, ListObjectsV2Command } = require('@aws-sdk/client-s3');
const { unmarshall } = require('@aws-sdk/util-dynamodb');

const dynamoClient = new DynamoDBClient({ region: 'us-east-1' });
const s3Client = new S3Client({ region: 'us-east-1' });

const COMIC_BUCKET = process.env.COMIC_BUCKET_NAME;
const COMIC_TABLE = process.env.COMIC_TABLE_NAME;
const PAGE_SIZE = 10;

/**
 * Processes an invalidation request and refreshes cache pages
 */
exports.handler = async (event) => {
	console.log('Processing cache invalidation event:', JSON.stringify(event, null, 2));

	try {
		for (const record of event.Records) {
			const key = record.s3.object.key;
			
			// Parse the invalidation type from the key
			const parts = key.split('/');
			if (parts[0] !== 'invalidation') continue;

			if (parts[1] === 'all') {
				await refreshAllComicsCache();
			} else if (parts[1] === 'tags' && parts[2]) {
				const tag = parts[2];
				await refreshTagCache(tag);
			}

			// Clean up the invalidation trigger object
			await deleteS3Object(key);
		}

		return { statusCode: 200, body: 'Cache refresh completed successfully' };
	} catch (error) {
		console.error('Error processing invalidation:', error);
		throw error;
	}
};

/**
 * Refreshes cache for all comics
 */
async function refreshAllComicsCache() {
	console.log('Refreshing all comics cache...');
	
	let lastEvaluatedKey = null;
	let pageNumber = 1;
	let processedPages = new Set();

	do {
		const scanResult = await dynamoClient.send(new ScanCommand({
			TableName: COMIC_TABLE,
			Limit: PAGE_SIZE,
			ScanIndexForward: false, // DESC order by sort key
			ExclusiveStartKey: lastEvaluatedKey
		}));

		if (scanResult.Items && scanResult.Items.length > 0) {
			const items = scanResult.Items.map(item => unmarshall(item));
			
			const pageData = {
				items,
				page: pageNumber,
				hasNextPage: !!scanResult.LastEvaluatedKey
			};

			await writePageToS3('all', pageNumber, pageData);
			processedPages.add(pageNumber);
			
			pageNumber++;
		}

		lastEvaluatedKey = scanResult.LastEvaluatedKey;
	} while (lastEvaluatedKey);

	await cleanupOldPages('all', processedPages);
}

/**
 * Refreshes cache for a specific tag
 */
async function refreshTagCache(tag) {
	console.log(`Refreshing cache for tag: ${tag}`);
	
	let lastEvaluatedKey = null;
	let pageNumber = 1;
	let processedPages = new Set();

	do {
		// Query DynamoDB using a Scan with filter
		const queryParams = {
			TableName: COMIC_TABLE,
			FilterExpression: 'contains(#tags, :tag)',
			ExpressionAttributeNames: {
				'#tags': 'tags'
			},
			ExpressionAttributeValues: {
				':tag': { S: tag }
			},
			Limit: PAGE_SIZE,
			ExclusiveStartKey: lastEvaluatedKey
		};

		console.log('Querying DynamoDB with params:', queryParams);
		const queryResult = await dynamoClient.send(new ScanCommand(queryParams));
		console.log('Query results:', queryResult);

		if (queryResult.Items && queryResult.Items.length > 0) {
			// Sort items by happenedOnDate
			const items = queryResult.Items.map(item => unmarshall(item))
				.sort((a, b) => (b.happenedOnDate || '').localeCompare(a.happenedOnDate || ''));
			
			const pageData = {
				items,
				page: pageNumber,
				hasNextPage: !!queryResult.LastEvaluatedKey,
				tag
			};

			// Write cache page to S3
			await writePageToS3(`tags/${tag}`, pageNumber, pageData);
			processedPages.add(pageNumber);
			
			pageNumber++;
		}

		lastEvaluatedKey = queryResult.LastEvaluatedKey;
	} while (lastEvaluatedKey);

	// Clean up old cache pages
	await cleanupOldPages(`tags/${tag}`, processedPages);
}

/**
 * Writes a page of data to S3
 */
async function writePageToS3(prefix, pageNumber, data) {
	const key = `cache/${prefix}/${pageNumber}.json`;
	console.log(`Writing cache page to S3: ${key}`);

	await s3Client.send(new PutObjectCommand({
		Bucket: COMIC_BUCKET,
		Key: key,
		Body: JSON.stringify(data),
		ContentType: 'application/json'
	}));
}

/**
 * Deletes an S3 object
 */
async function deleteS3Object(key) {
	console.log(`Deleting S3 object: ${key}`);
	
	await s3Client.send(new DeleteObjectCommand({
		Bucket: COMIC_BUCKET,
		Key: key
	}));
}

/**
 * Cleans up old cache pages that are no longer needed
 */
async function cleanupOldPages(prefix, validPages) {
	console.log(`Cleaning up old cache pages for prefix: ${prefix}`);
	
	const listParams = {
		Bucket: COMIC_BUCKET,
		Prefix: `cache/${prefix}/`
	};

	try {
		const listResult = await s3Client.send(new ListObjectsV2Command(listParams));
		
		if (!listResult.Contents) return;

		for (const object of listResult.Contents) {
			const key = object.Key;
			const pageMatch = key.match(/(\d+)\.json$/);
			
			if (pageMatch) {
				const pageNumber = parseInt(pageMatch[1]);
				if (!validPages.has(pageNumber)) {
					console.log(`Deleting obsolete cache page: ${key}`);
					await deleteS3Object(key);
				}
			}
		}
	} catch (error) {
		console.error('Error cleaning up old pages:', error);
		throw error;
	}
}