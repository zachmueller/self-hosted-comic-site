const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
const { DynamoDBDocumentClient, QueryCommand, ScanCommand } = require('@aws-sdk/lib-dynamodb');
const { S3Client, GetObjectCommand, PutObjectCommand } = require('@aws-sdk/client-s3');

// DynamoDB
const ddbClient = new DynamoDBClient({
	region: 'us-east-1',
});
const ddbDocClient = DynamoDBDocumentClient.from(ddbClient);
const COMIC_TABLE_NAME = '{{DYNAMODB_TABLE_NAME}}';

// S3
const s3Client = new S3Client({ region: 'us-east-1' });
const COMIC_BUCKET = '{{COMIC_BUCKET_NAME}}';

/**
 * Retrieves data from S3
 * @param {string} key - S3 key to pull data from
 * @returns {Promise<Object|null>} - Cached data or null if not found/expired
 */
async function getS3Data(key) {
	try {
		const command = new GetObjectCommand({
			Bucket: COMIC_BUCKET,
			Key: `${key}`
		});
		const response = await s3Client.send(command);

		// Convert readable stream to string
		const rawData = await streamToString(response.Body);

		// Parse data
		const parsedData = JSON.parse(rawData);
		return parsedData;
	} catch (error) {
		if (error.name === 'NoSuchKey') {
			// No data exists
			console.log(`No data exists for key: ${key}`);
			return null;
		}

		// Log other errors but don't fail the request
		console.error('Error reading from cache:', error);
		return null;
	}
}

/**
 * Utility function to convert readable stream to string
 * @param {ReadableStream} stream - Stream to convert
 * @returns {Promise<string>} - Stream contents as string
 */
async function streamToString(stream) {
	return new Promise((resolve, reject) => {
		const chunks = [];
		stream.on('data', (chunk) => chunks.push(chunk));
		stream.on('error', reject);
		stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));
	});
}

/**
 * Parse query parameters from CloudFront event
 */
const parseQueryParameters = (querystring) => {
	if (!querystring) return {};
	
	try {
		const params = {};
		const searchParams = new URLSearchParams(querystring);
		
		for (const [key, value] of searchParams.entries()) {
			params[key] = value;
		}
		
		console.log('Parsed query parameters:', params);
		return params;
	} catch (error) {
		console.error('Error parsing query parameters:', error);
		return {};
	}
};

// Different API calls
const getComics = async ({ page = 1, tag, pageSize = 10 } = {}) => {
	// TODO::validate inputs, especially that `page` is an integer::
	console.log('getComics called with parameters:', { page, tag, pageSize });
	const S3_KEY = tag ? `cache/tags/${tag}/${page}.json` : `cache/all/${page}.json`;
	console.log('Looking for cache at S3_KEY:', S3_KEY);

	try {
		// Get data from S3
		const comics = await getS3Data(S3_KEY);
		console.log('S3 cache response:', comics);

		// If no cached data exists, return empty but valid structure
		if (!comics) {
			console.log('No cached data found, returning empty structure');
			return {
				items: [],
				page: parseInt(page),
				hasNextPage: false
			};
		}

		return comics;
	} catch (error) {
		console.error('Error fetching comics:', error);
		// Return valid empty structure even on error
		return {
			items: [],
			page: parseInt(page),
			hasNextPage: false
		};
	}
}

const getComic = async (comicId) => {
	// TODO: Implement getComic logic
	throw new Error('Not implemented');
};

const getComicImage = async (comicId) => {
	// TODO: Implement getComicImage logic
	throw new Error('Not implemented');
};

const getRandomComic = async () => {
	// TODO: Implement getRandomComic logic
	throw new Error('Not implemented');
};


exports.handler = async (event) => {
	console.log('Lambda@Edge function invoked with event:', JSON.stringify(event, null, 2));

	try {
		const request = event.Records[0].cf.request;
		console.log('Parsed request:', {
			uri: request.uri,
			querystring: request.querystring,
			headers: request.headers
		});
		const uri = request.uri;
		const queryParams = parseQueryParameters(request.querystring);
		console.log('Parsed query parameters:', queryParams);

		let result;

		// Route based on URI
		if (uri.startsWith('/api/getComics')) {
			const params = parseQueryParameters(request.querystring);
			const page = parseInt(params.page) || 1;
			const tag = params.tag || null;
			const pageSize = parseInt(params.pageSize) || 10;
			
			console.log('Fetching comics with params:', { page, tag, pageSize });
			
			result = await getComics({ 
				page, 
				tag, 
				pageSize 
			});
		}
		else if (uri.startsWith('/api/getComic/')) {
			const comicId = uri.split('/api/getComic/')[1];
			result = await getComic(comicId);
		}
		else if (uri.startsWith('/api/getComicImage/')) {
			const comicId = uri.split('/api/getComicImage/')[1];
			result = await getComicImage(comicId);
		}
		else if (uri === '/api/getRandomComic') {
			result = await getRandomComic();
		}
		else {
			return {
				status: '404',
				statusDescription: 'Not Found',
				headers: {
					'content-type': [{ key: 'Content-Type', value: 'application/json' }],
				},
				body: JSON.stringify({ error: 'Route not found' }),
			};
		}

		const response = {
			status: '200',
			statusDescription: 'OK',
			headers: {
				'content-type': [{ key: 'Content-Type', value: 'application/json' }],
			},
			body: JSON.stringify(result || { items: [], page: 1, hasNextPage: false }),
		};
		console.log('Sending response:', response);
		return response;
	} catch (error) {
		console.error('Error details:', {
			message: error.message,
			stack: error.stack,
			name: error.name
		});

		return {
			status: '500',
			statusDescription: 'Internal Server Error',
			headers: {
				'content-type': [{ key: 'Content-Type', value: 'application/json' }],
			},
			body: JSON.stringify({
				error: 'Request failed',
				details: error.message
			}),
		};
	}
};